// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package main

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// MessageRouterMessagePoolInfo is an auto generated low-level Go binding around an user-defined struct.
type MessageRouterMessagePoolInfo struct {
	Topic               string
	MessagePoolAddress  common.Address
	LoginManagerAddress common.Address
}

// MainMetaData contains all meta data concerning the Main contract.
var MainMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getMessages\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"topic\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"messagePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loginManagerAddress\",\"type\":\"address\"}],\"internalType\":\"structMessageRouter.MessagePoolInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"messagePoolInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"topic\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"messagePoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loginManagerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"messagePoolAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"topic\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"loginManagerAddress\",\"type\":\"address\"}],\"name\":\"registerMessagePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"messagePoolAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeAddress\",\"type\":\"address\"}],\"name\":\"setBridgeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b503060405161001e90610089565b61002891906100d8565b604051809103906000f080158015610044573d6000803e3d6000fd5b506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506100f3565b6127b3806200122a83390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100c282610097565b9050919050565b6100d2816100b7565b82525050565b60006020820190506100ed60008301846100c9565b92915050565b61112780620001036000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631ee50137146100675780633f03de101461008557806357ca5d38146100b75780635ff6cbf3146100d35780637f5a22f9146100f1578063e2235c581461010d575b600080fd5b61006f610129565b60405161007c9190610749565b60405180910390f35b61009f600480360381019061009a91906107ae565b61014d565b6040516100ae9392919061086b565b60405180910390f35b6100d160048036038101906100cc9190610a0a565b61024f565b005b6100db61036c565b6040516100e89190610be4565b60405180910390f35b61010b60048036038101906101069190610c06565b610509565b005b61012760048036038101906101229190610c93565b61054d565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002818154811061015d57600080fd5b906000526020600020906003020160009150905080600001805461018090610d36565b80601f01602080910402602001604051908101604052809291908181526020018280546101ac90610d36565b80156101f95780601f106101ce576101008083540402835291602001916101f9565b820191906000526020600020905b8154815290600101906020018083116101dc57829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905083565b600260405180606001604052808481526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000190816102d69190610f13565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b60606002805480602002602001604051908101604052809291908181526020016000905b8282101561050057838290600052602060002090600302016040518060600160405290816000820180546103c390610d36565b80601f01602080910402602001604051908101604052809291908181526020018280546103ef90610d36565b801561043c5780601f106104115761010080835404028352916020019161043c565b820191906000526020600020905b81548152906001019060200180831161041f57829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505081526020019060010190610390565b50505050905090565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8046036105ce5760008490508073ffffffffffffffffffffffffffffffffffffffff1663c48d6d5e8585336040518463ffffffff1660e01b815260040161059693929190611012565b600060405180830381600087803b1580156105b057600080fd5b505af11580156105c4573d6000803e3d6000fd5b5050505050610702565b6000813385856040516024016105e79493929190611053565b6040516020818303038152906040527f48394a4e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16826040516106af91906110da565b6000604051808303816000865af19150503d80600081146106ec576040519150601f19603f3d011682016040523d82523d6000602084013e6106f1565b606091505b50509050806106ff57600080fd5b50505b50505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061073382610708565b9050919050565b61074381610728565b82525050565b600060208201905061075e600083018461073a565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61078b81610778565b811461079657600080fd5b50565b6000813590506107a881610782565b92915050565b6000602082840312156107c4576107c361076e565b5b60006107d284828501610799565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156108155780820151818401526020810190506107fa565b60008484015250505050565b6000601f19601f8301169050919050565b600061083d826107db565b61084781856107e6565b93506108578185602086016107f7565b61086081610821565b840191505092915050565b600060608201905081810360008301526108858186610832565b9050610894602083018561073a565b6108a1604083018461073a565b949350505050565b6108b281610728565b81146108bd57600080fd5b50565b6000813590506108cf816108a9565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61091782610821565b810181811067ffffffffffffffff82111715610936576109356108df565b5b80604052505050565b6000610949610764565b9050610955828261090e565b919050565b600067ffffffffffffffff821115610975576109746108df565b5b61097e82610821565b9050602081019050919050565b82818337600083830152505050565b60006109ad6109a88461095a565b61093f565b9050828152602081018484840111156109c9576109c86108da565b5b6109d484828561098b565b509392505050565b600082601f8301126109f1576109f06108d5565b5b8135610a0184826020860161099a565b91505092915050565b600080600060608486031215610a2357610a2261076e565b5b6000610a31868287016108c0565b935050602084013567ffffffffffffffff811115610a5257610a51610773565b5b610a5e868287016109dc565b9250506040610a6f868287016108c0565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000610ac1826107db565b610acb8185610aa5565b9350610adb8185602086016107f7565b610ae481610821565b840191505092915050565b610af881610728565b82525050565b60006060830160008301518482036000860152610b1b8282610ab6565b9150506020830151610b306020860182610aef565b506040830151610b436040860182610aef565b508091505092915050565b6000610b5a8383610afe565b905092915050565b6000602082019050919050565b6000610b7a82610a79565b610b848185610a84565b935083602082028501610b9685610a95565b8060005b85811015610bd25784840389528151610bb38582610b4e565b9450610bbe83610b62565b925060208a01995050600181019050610b9a565b50829750879550505050505092915050565b60006020820190508181036000830152610bfe8184610b6f565b905092915050565b600060208284031215610c1c57610c1b61076e565b5b6000610c2a848285016108c0565b91505092915050565b600080fd5b600080fd5b60008083601f840112610c5357610c526108d5565b5b8235905067ffffffffffffffff811115610c7057610c6f610c33565b5b602083019150836001820283011115610c8c57610c8b610c38565b5b9250929050565b60008060008060608587031215610cad57610cac61076e565b5b6000610cbb878288016108c0565b945050602085013567ffffffffffffffff811115610cdc57610cdb610773565b5b610ce887828801610c3d565b93509350506040610cfb87828801610799565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610d4e57607f821691505b602082108103610d6157610d60610d07565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610dc97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610d8c565b610dd38683610d8c565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610e10610e0b610e0684610778565b610deb565b610778565b9050919050565b6000819050919050565b610e2a83610df5565b610e3e610e3682610e17565b848454610d99565b825550505050565b600090565b610e53610e46565b610e5e818484610e21565b505050565b5b81811015610e8257610e77600082610e4b565b600181019050610e64565b5050565b601f821115610ec757610e9881610d67565b610ea184610d7c565b81016020851015610eb0578190505b610ec4610ebc85610d7c565b830182610e63565b50505b505050565b600082821c905092915050565b6000610eea60001984600802610ecc565b1980831691505092915050565b6000610f038383610ed9565b9150826002028217905092915050565b610f1c826107db565b67ffffffffffffffff811115610f3557610f346108df565b5b610f3f8254610d36565b610f4a828285610e86565b600060209050601f831160018114610f7d5760008415610f6b578287015190505b610f758582610ef7565b865550610fdd565b601f198416610f8b86610d67565b60005b82811015610fb357848901518255600182019150602085019450602081019050610f8e565b86831015610fd05784890151610fcc601f891682610ed9565b8355505b6001600288020188555050505b505050505050565b6000610ff183856107e6565b9350610ffe83858461098b565b61100783610821565b840190509392505050565b6000604082019050818103600083015261102d818587610fe5565b905061103c602083018461073a565b949350505050565b61104d81610778565b82525050565b60006060820190506110686000830187611044565b611075602083018661073a565b8181036040830152611088818486610fe5565b905095945050505050565b600081519050919050565b600081905092915050565b60006110b482611093565b6110be818561109e565b93506110ce8185602086016107f7565b80840191505092915050565b60006110e682846110a9565b91508190509291505056fea2646970667358221220a53a403a7d0ce78004e8b8b1ccde31e39726a21420a7da279c26550a6dfe8c0e64736f6c63430008130033608060405234801561001057600080fd5b506040516127b33803806127b3833981810160405281019061003291906100db565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610108565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b6100b88161009d565b81146100c357600080fd5b50565b6000815190506100d5816100af565b92915050565b6000602082840312156100f1576100f0610078565b5b60006100ff848285016100c6565b91505092915050565b61269c806101176000396000f3fe60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063792338eb1462000033575b600080fd5b6200005160048036038101906200004b91906200013f565b62000053565b005b6000828260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516200008690620000b9565b62000094939291906200023d565b604051809103906000f080158015620000b1573d6000803e3d6000fd5b509050505050565b6123f3806200027483390190565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112620000f957620000f8620000d1565b5b8235905067ffffffffffffffff811115620001195762000118620000d6565b5b602083019150836001820283011115620001385762000137620000db565b5b9250929050565b60008060208385031215620001595762000158620000c7565b5b600083013567ffffffffffffffff8111156200017a5762000179620000cc565b5b6200018885828601620000e0565b92509250509250929050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000620001d3838562000194565b9350620001e2838584620001a5565b620001ed83620001b4565b840190509392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200022582620001f8565b9050919050565b620002378162000218565b82525050565b600060408201905081810360008301526200025a818587620001c5565b90506200026b60208301846200022c565b94935050505056fe60806040523480156200001157600080fd5b50604051620023f3380380620023f383398181016040528101906200003791906200046e565b81600290816200004891906200071f565b5080600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555030600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051620000bc9062000268565b620000c992919062000817565b604051809103906000f080158015620000e6573d6000803e3d6000fd5b50600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000306002600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040516024016200016393929190620008e5565b6040516020818303038152906040527f57ca5d38000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905060008273ffffffffffffffffffffffffffffffffffffffff16826040516200020b919062000976565b6000604051808303816000865af19150503d80600081146200024a576040519150601f19603f3d011682016040523d82523d6000602084013e6200024f565b606091505b50509050806200025e57600080fd5b505050506200098f565b6108a58062001b4e83390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002df8262000294565b810181811067ffffffffffffffff82111715620003015762000300620002a5565b5b80604052505050565b60006200031662000276565b9050620003248282620002d4565b919050565b600067ffffffffffffffff821115620003475762000346620002a5565b5b620003528262000294565b9050602081019050919050565b60005b838110156200037f57808201518184015260208101905062000362565b60008484015250505050565b6000620003a26200039c8462000329565b6200030a565b905082815260208101848484011115620003c157620003c06200028f565b5b620003ce8482856200035f565b509392505050565b600082601f830112620003ee57620003ed6200028a565b5b8151620004008482602086016200038b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004368262000409565b9050919050565b620004488162000429565b81146200045457600080fd5b50565b60008151905062000468816200043d565b92915050565b6000806040838503121562000488576200048762000280565b5b600083015167ffffffffffffffff811115620004a957620004a862000285565b5b620004b785828601620003d6565b9250506020620004ca8582860162000457565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200052757607f821691505b6020821081036200053d576200053c620004df565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005a77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000568565b620005b3868362000568565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000600620005fa620005f484620005cb565b620005d5565b620005cb565b9050919050565b6000819050919050565b6200061c83620005df565b620006346200062b8262000607565b84845462000575565b825550505050565b600090565b6200064b6200063c565b6200065881848462000611565b505050565b5b8181101562000680576200067460008262000641565b6001810190506200065e565b5050565b601f821115620006cf57620006998162000543565b620006a48462000558565b81016020851015620006b4578190505b620006cc620006c38562000558565b8301826200065d565b50505b505050565b600082821c905092915050565b6000620006f460001984600802620006d4565b1980831691505092915050565b60006200070f8383620006e1565b9150826002028217905092915050565b6200072a82620004d4565b67ffffffffffffffff811115620007465762000745620002a5565b5b6200075282546200050e565b6200075f82828562000684565b600060209050601f83116001811462000797576000841562000782578287015190505b6200078e858262000701565b865550620007fe565b601f198416620007a78662000543565b60005b82811015620007d157848901518255600182019150602085019450602081019050620007aa565b86831015620007f15784890151620007ed601f891682620006e1565b8355505b6001600288020188555050505b505050505050565b620008118162000429565b82525050565b60006040820190506200082e600083018562000806565b6200083d602083018462000806565b9392505050565b600082825260208201905092915050565b6000815462000864816200050e565b62000870818662000844565b945060018216600081146200088e5760018114620008a557620008dc565b60ff198316865281151560200286019350620008dc565b620008b08562000543565b60005b83811015620008d457815481890152600182019150602081019050620008b3565b808801955050505b50505092915050565b6000606082019050620008fc600083018662000806565b818103602083015262000910818562000855565b905062000921604083018462000806565b949350505050565b600081519050919050565b600081905092915050565b60006200094c8262000929565b62000958818562000934565b93506200096a8185602086016200035f565b80840191505092915050565b60006200098482846200093f565b915081905092915050565b6111af806200099f6000396000f3fe60806040526004361061007b5760003560e01c8063b0f771c31161004e578063b0f771c31461012a578063c48d6d5e14610155578063e4fae0da14610171578063f39740a11461019a5761007b565b80635b1242a5146100805780635ff6cbf3146100ab578063747b8050146100d657806395066e33146100ff575b600080fd5b34801561008c57600080fd5b506100956101b6565b6040516100a291906107f7565b60405180910390f35b3480156100b757600080fd5b506100c06101dc565b6040516100cd91906109dc565b60405180910390f35b3480156100e257600080fd5b506100fd60048036038101906100f89190610a34565b61032d565b005b34801561010b57600080fd5b506101146103ed565b6040516101219190610aab565b60405180910390f35b34801561013657600080fd5b5061013f61047f565b60405161014c91906107f7565b60405180910390f35b61016f600480360381019061016a9190610b32565b6104a5565b005b34801561017d57600080fd5b5061019860048036038101906101939190610b92565b610691565b005b6101b460048036038101906101af9190610c0b565b6106a7565b005b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606001805480602002602001604051908101604052809291908181526020016000905b8282101561032457838290600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461028990610cae565b80601f01602080910402602001604051908101604052809291908181526020018280546102b590610cae565b80156103025780601f106102d757610100808354040283529160200191610302565b820191906000526020600020905b8154815290600101906020018083116102e557829003601f168201915b5050505050815260200160028201548152505081526020019060010190610200565b50505050905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461038757600080fd5b6000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060600280546103fc90610cae565b80601f016020809104026020016040519081016040528092919081815260200182805461042890610cae565b80156104755780601f1061044a57610100808354040283529160200191610475565b820191906000526020600020905b81548152906001019060200180831161045857829003601f168201915b5050505050905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b806000805b60008054905081101561054057600081815481106104cb576104ca610cdf565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361052d57600191505b808061053890610d3d565b9150506104aa565b5080610581576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057890610dd1565b60405180910390fd5b600160405180606001604052808573ffffffffffffffffffffffffffffffffffffffff16815260200187878080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200146815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908161067d9190610fcc565b506040820151816002015550505050505050565b8181600291826106a29291906110a9565b505050565b600160405180606001604052808473ffffffffffffffffffffffffffffffffffffffff16815260200186868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050815260200183815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190816107a39190610fcc565b5060408201518160020155505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107e1826107b6565b9050919050565b6107f1816107d6565b82525050565b600060208201905061080c60008301846107e8565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610847816107d6565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561088757808201518184015260208101905061086c565b60008484015250505050565b6000601f19601f8301169050919050565b60006108af8261084d565b6108b98185610858565b93506108c9818560208601610869565b6108d281610893565b840191505092915050565b6000819050919050565b6108f0816108dd565b82525050565b600060608301600083015161090e600086018261083e565b506020830151848203602086015261092682826108a4565b915050604083015161093b60408601826108e7565b508091505092915050565b600061095283836108f6565b905092915050565b6000602082019050919050565b600061097282610812565b61097c818561081d565b93508360208202850161098e8561082e565b8060005b858110156109ca57848403895281516109ab8582610946565b94506109b68361095a565b925060208a01995050600181019050610992565b50829750879550505050505092915050565b600060208201905081810360008301526109f68184610967565b905092915050565b600080fd5b600080fd5b610a11816107d6565b8114610a1c57600080fd5b50565b600081359050610a2e81610a08565b92915050565b600060208284031215610a4a57610a496109fe565b5b6000610a5884828501610a1f565b91505092915050565b600082825260208201905092915050565b6000610a7d8261084d565b610a878185610a61565b9350610a97818560208601610869565b610aa081610893565b840191505092915050565b60006020820190508181036000830152610ac58184610a72565b905092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610af257610af1610acd565b5b8235905067ffffffffffffffff811115610b0f57610b0e610ad2565b5b602083019150836001820283011115610b2b57610b2a610ad7565b5b9250929050565b600080600060408486031215610b4b57610b4a6109fe565b5b600084013567ffffffffffffffff811115610b6957610b68610a03565b5b610b7586828701610adc565b93509350506020610b8886828701610a1f565b9150509250925092565b60008060208385031215610ba957610ba86109fe565b5b600083013567ffffffffffffffff811115610bc757610bc6610a03565b5b610bd385828601610adc565b92509250509250929050565b610be8816108dd565b8114610bf357600080fd5b50565b600081359050610c0581610bdf565b92915050565b60008060008060608587031215610c2557610c246109fe565b5b600085013567ffffffffffffffff811115610c4357610c42610a03565b5b610c4f87828801610adc565b94509450506020610c6287828801610a1f565b9250506040610c7387828801610bf6565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610cc657607f821691505b602082108103610cd957610cd8610c7f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d48826108dd565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d7a57610d79610d0e565b5b600182019050919050565b7f55736572206e6f74207265676973746572656400000000000000000000000000600082015250565b6000610dbb601383610a61565b9150610dc682610d85565b602082019050919050565b60006020820190508181036000830152610dea81610dae565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610e827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610e45565b610e8c8683610e45565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610ec9610ec4610ebf846108dd565b610ea4565b6108dd565b9050919050565b6000819050919050565b610ee383610eae565b610ef7610eef82610ed0565b848454610e52565b825550505050565b600090565b610f0c610eff565b610f17818484610eda565b505050565b5b81811015610f3b57610f30600082610f04565b600181019050610f1d565b5050565b601f821115610f8057610f5181610e20565b610f5a84610e35565b81016020851015610f69578190505b610f7d610f7585610e35565b830182610f1c565b50505b505050565b600082821c905092915050565b6000610fa360001984600802610f85565b1980831691505092915050565b6000610fbc8383610f92565b9150826002028217905092915050565b610fd58261084d565b67ffffffffffffffff811115610fee57610fed610df1565b5b610ff88254610cae565b611003828285610f3f565b600060209050601f8311600181146110365760008415611024578287015190505b61102e8582610fb0565b865550611096565b601f19841661104486610e20565b60005b8281101561106c57848901518255600182019150602085019450602081019050611047565b868310156110895784890151611085601f891682610f92565b8355505b6001600288020188555050505b505050505050565b600082905092915050565b6110b3838361109e565b67ffffffffffffffff8111156110cc576110cb610df1565b5b6110d68254610cae565b6110e1828285610f3f565b6000601f83116001811461111057600084156110fe578287013590505b6111088582610fb0565b865550611170565b601f19841661111e86610e20565b60005b8281101561114657848901358255600182019150602085019450602081019050611121565b86831015611163578489013561115f601f891682610f92565b8355505b6001600288020188555050505b5050505050505056fea26469706673582212207aa8cc29e0dd1d5259c268cd0db887b8c24053d16874360cab997409e86eb90064736f6c63430008130033608060405234801561001057600080fd5b506040516108a53803806108a58339818101604052810190610032919061011e565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061015e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100eb826100c0565b9050919050565b6100fb816100e0565b811461010657600080fd5b50565b600081519050610118816100f2565b92915050565b60008060408385031215610135576101346100bb565b5b600061014385828601610109565b925050602061015485828601610109565b9150509250929050565b6107388061016d6000396000f3fe60806040526004361061003f5760003560e01c80631e59c529146100445780633268cc5614610060578063689e1c031461008b578063e1a87be4146100c8575b600080fd5b61005e6004803603810190610059919061054d565b6100f3565b005b34801561006c57600080fd5b506100756101d0565b60405161008291906105b8565b60405180910390f35b34801561009757600080fd5b506100b260048036038101906100ad91906105d3565b6101f6565b6040516100bf91906105b8565b60405180910390f35b3480156100d457600080fd5b506100dd61023f565b6040516100ea91906105b8565b60405180910390f35b600073ffffffffffffffffffffffffffffffffffffffff1660008360405161011b919061068d565b908152602001604051809103902060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036101cc5780600083604051610176919061068d565b908152602001604051809103902060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101cb81610265565b5b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000818051602081018201805184825260208301602085012081835280955050505050506000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008160405160240161027891906105b8565b6040516020818303038152906040527f747b8050000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260405161034091906106eb565b6000604051808303816000865af19150503d806000811461037d576040519150601f19603f3d011682016040523d82523d6000602084013e610382565b606091505b505090508061039057600080fd5b505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103fc826103b3565b810181811067ffffffffffffffff8211171561041b5761041a6103c4565b5b80604052505050565b600061042e610395565b905061043a82826103f3565b919050565b600067ffffffffffffffff82111561045a576104596103c4565b5b610463826103b3565b9050602081019050919050565b82818337600083830152505050565b600061049261048d8461043f565b610424565b9050828152602081018484840111156104ae576104ad6103ae565b5b6104b9848285610470565b509392505050565b600082601f8301126104d6576104d56103a9565b5b81356104e684826020860161047f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061051a826104ef565b9050919050565b61052a8161050f565b811461053557600080fd5b50565b60008135905061054781610521565b92915050565b600080604083850312156105645761056361039f565b5b600083013567ffffffffffffffff811115610582576105816103a4565b5b61058e858286016104c1565b925050602061059f85828601610538565b9150509250929050565b6105b28161050f565b82525050565b60006020820190506105cd60008301846105a9565b92915050565b6000602082840312156105e9576105e861039f565b5b600082013567ffffffffffffffff811115610607576106066103a4565b5b610613848285016104c1565b91505092915050565b600081519050919050565b600081905092915050565b60005b83811015610650578082015181840152602081019050610635565b60008484015250505050565b60006106678261061c565b6106718185610627565b9350610681818560208601610632565b80840191505092915050565b6000610699828461065c565b915081905092915050565b600081519050919050565b600081905092915050565b60006106c5826106a4565b6106cf81856106af565b93506106df818560208601610632565b80840191505092915050565b60006106f782846106ba565b91508190509291505056fea26469706673582212209012011c02b08c42ce0d48cbcc99989b2d651cb67d9bcab6069a8ef44dfc0f6764736f6c63430008130033a2646970667358221220b6c74719fff164999ba9d836eeebd8095c7d02d569ff49cb524db61e3b9c457464736f6c63430008130033",
}

// MainABI is the input ABI used to generate the binding from.
// Deprecated: Use MainMetaData.ABI instead.
var MainABI = MainMetaData.ABI

// MainBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use MainMetaData.Bin instead.
var MainBin = MainMetaData.Bin

// DeployMain deploys a new Ethereum contract, binding an instance of Main to it.
func DeployMain(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Main, error) {
	parsed, err := MainMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(MainBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Main{MainCaller: MainCaller{contract: contract}, MainTransactor: MainTransactor{contract: contract}, MainFilterer: MainFilterer{contract: contract}}, nil
}

// Main is an auto generated Go binding around an Ethereum contract.
type Main struct {
	MainCaller     // Read-only binding to the contract
	MainTransactor // Write-only binding to the contract
	MainFilterer   // Log filterer for contract events
}

// MainCaller is an auto generated read-only Go binding around an Ethereum contract.
type MainCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainTransactor is an auto generated write-only Go binding around an Ethereum contract.
type MainTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type MainFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// MainSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type MainSession struct {
	Contract     *Main             // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MainCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type MainCallerSession struct {
	Contract *MainCaller   // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// MainTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type MainTransactorSession struct {
	Contract     *MainTransactor   // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// MainRaw is an auto generated low-level Go binding around an Ethereum contract.
type MainRaw struct {
	Contract *Main // Generic contract binding to access the raw methods on
}

// MainCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type MainCallerRaw struct {
	Contract *MainCaller // Generic read-only contract binding to access the raw methods on
}

// MainTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type MainTransactorRaw struct {
	Contract *MainTransactor // Generic write-only contract binding to access the raw methods on
}

// NewMain creates a new instance of Main, bound to a specific deployed contract.
func NewMain(address common.Address, backend bind.ContractBackend) (*Main, error) {
	contract, err := bindMain(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Main{MainCaller: MainCaller{contract: contract}, MainTransactor: MainTransactor{contract: contract}, MainFilterer: MainFilterer{contract: contract}}, nil
}

// NewMainCaller creates a new read-only instance of Main, bound to a specific deployed contract.
func NewMainCaller(address common.Address, caller bind.ContractCaller) (*MainCaller, error) {
	contract, err := bindMain(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &MainCaller{contract: contract}, nil
}

// NewMainTransactor creates a new write-only instance of Main, bound to a specific deployed contract.
func NewMainTransactor(address common.Address, transactor bind.ContractTransactor) (*MainTransactor, error) {
	contract, err := bindMain(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &MainTransactor{contract: contract}, nil
}

// NewMainFilterer creates a new log filterer instance of Main, bound to a specific deployed contract.
func NewMainFilterer(address common.Address, filterer bind.ContractFilterer) (*MainFilterer, error) {
	contract, err := bindMain(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &MainFilterer{contract: contract}, nil
}

// bindMain binds a generic wrapper to an already deployed contract.
func bindMain(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := MainMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Main *MainRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Main.Contract.MainCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Main *MainRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Main.Contract.MainTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Main *MainRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Main.Contract.MainTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Main *MainCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Main.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Main *MainTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Main.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Main *MainTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Main.Contract.contract.Transact(opts, method, params...)
}

// GetMessages is a free data retrieval call binding the contract method 0x5ff6cbf3.
//
// Solidity: function getMessages() view returns((string,address,address)[])
func (_Main *MainCaller) GetMessages(opts *bind.CallOpts) ([]MessageRouterMessagePoolInfo, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "getMessages")

	if err != nil {
		return *new([]MessageRouterMessagePoolInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]MessageRouterMessagePoolInfo)).(*[]MessageRouterMessagePoolInfo)

	return out0, err

}

// GetMessages is a free data retrieval call binding the contract method 0x5ff6cbf3.
//
// Solidity: function getMessages() view returns((string,address,address)[])
func (_Main *MainSession) GetMessages() ([]MessageRouterMessagePoolInfo, error) {
	return _Main.Contract.GetMessages(&_Main.CallOpts)
}

// GetMessages is a free data retrieval call binding the contract method 0x5ff6cbf3.
//
// Solidity: function getMessages() view returns((string,address,address)[])
func (_Main *MainCallerSession) GetMessages() ([]MessageRouterMessagePoolInfo, error) {
	return _Main.Contract.GetMessages(&_Main.CallOpts)
}

// MessageFactoryAddress is a free data retrieval call binding the contract method 0x1ee50137.
//
// Solidity: function messageFactoryAddress() view returns(address)
func (_Main *MainCaller) MessageFactoryAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "messageFactoryAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// MessageFactoryAddress is a free data retrieval call binding the contract method 0x1ee50137.
//
// Solidity: function messageFactoryAddress() view returns(address)
func (_Main *MainSession) MessageFactoryAddress() (common.Address, error) {
	return _Main.Contract.MessageFactoryAddress(&_Main.CallOpts)
}

// MessageFactoryAddress is a free data retrieval call binding the contract method 0x1ee50137.
//
// Solidity: function messageFactoryAddress() view returns(address)
func (_Main *MainCallerSession) MessageFactoryAddress() (common.Address, error) {
	return _Main.Contract.MessageFactoryAddress(&_Main.CallOpts)
}

// MessagePoolInfo is a free data retrieval call binding the contract method 0x3f03de10.
//
// Solidity: function messagePoolInfo(uint256 ) view returns(string topic, address messagePoolAddress, address loginManagerAddress)
func (_Main *MainCaller) MessagePoolInfo(opts *bind.CallOpts, arg0 *big.Int) (struct {
	Topic               string
	MessagePoolAddress  common.Address
	LoginManagerAddress common.Address
}, error) {
	var out []interface{}
	err := _Main.contract.Call(opts, &out, "messagePoolInfo", arg0)

	outstruct := new(struct {
		Topic               string
		MessagePoolAddress  common.Address
		LoginManagerAddress common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Topic = *abi.ConvertType(out[0], new(string)).(*string)
	outstruct.MessagePoolAddress = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.LoginManagerAddress = *abi.ConvertType(out[2], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// MessagePoolInfo is a free data retrieval call binding the contract method 0x3f03de10.
//
// Solidity: function messagePoolInfo(uint256 ) view returns(string topic, address messagePoolAddress, address loginManagerAddress)
func (_Main *MainSession) MessagePoolInfo(arg0 *big.Int) (struct {
	Topic               string
	MessagePoolAddress  common.Address
	LoginManagerAddress common.Address
}, error) {
	return _Main.Contract.MessagePoolInfo(&_Main.CallOpts, arg0)
}

// MessagePoolInfo is a free data retrieval call binding the contract method 0x3f03de10.
//
// Solidity: function messagePoolInfo(uint256 ) view returns(string topic, address messagePoolAddress, address loginManagerAddress)
func (_Main *MainCallerSession) MessagePoolInfo(arg0 *big.Int) (struct {
	Topic               string
	MessagePoolAddress  common.Address
	LoginManagerAddress common.Address
}, error) {
	return _Main.Contract.MessagePoolInfo(&_Main.CallOpts, arg0)
}

// RegisterMessagePool is a paid mutator transaction binding the contract method 0x57ca5d38.
//
// Solidity: function registerMessagePool(address messagePoolAddress, string topic, address loginManagerAddress) returns()
func (_Main *MainTransactor) RegisterMessagePool(opts *bind.TransactOpts, messagePoolAddress common.Address, topic string, loginManagerAddress common.Address) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "registerMessagePool", messagePoolAddress, topic, loginManagerAddress)
}

// RegisterMessagePool is a paid mutator transaction binding the contract method 0x57ca5d38.
//
// Solidity: function registerMessagePool(address messagePoolAddress, string topic, address loginManagerAddress) returns()
func (_Main *MainSession) RegisterMessagePool(messagePoolAddress common.Address, topic string, loginManagerAddress common.Address) (*types.Transaction, error) {
	return _Main.Contract.RegisterMessagePool(&_Main.TransactOpts, messagePoolAddress, topic, loginManagerAddress)
}

// RegisterMessagePool is a paid mutator transaction binding the contract method 0x57ca5d38.
//
// Solidity: function registerMessagePool(address messagePoolAddress, string topic, address loginManagerAddress) returns()
func (_Main *MainTransactorSession) RegisterMessagePool(messagePoolAddress common.Address, topic string, loginManagerAddress common.Address) (*types.Transaction, error) {
	return _Main.Contract.RegisterMessagePool(&_Main.TransactOpts, messagePoolAddress, topic, loginManagerAddress)
}

// SendMessage is a paid mutator transaction binding the contract method 0xe2235c58.
//
// Solidity: function sendMessage(address messagePoolAddress, string message, uint256 chainId) returns()
func (_Main *MainTransactor) SendMessage(opts *bind.TransactOpts, messagePoolAddress common.Address, message string, chainId *big.Int) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "sendMessage", messagePoolAddress, message, chainId)
}

// SendMessage is a paid mutator transaction binding the contract method 0xe2235c58.
//
// Solidity: function sendMessage(address messagePoolAddress, string message, uint256 chainId) returns()
func (_Main *MainSession) SendMessage(messagePoolAddress common.Address, message string, chainId *big.Int) (*types.Transaction, error) {
	return _Main.Contract.SendMessage(&_Main.TransactOpts, messagePoolAddress, message, chainId)
}

// SendMessage is a paid mutator transaction binding the contract method 0xe2235c58.
//
// Solidity: function sendMessage(address messagePoolAddress, string message, uint256 chainId) returns()
func (_Main *MainTransactorSession) SendMessage(messagePoolAddress common.Address, message string, chainId *big.Int) (*types.Transaction, error) {
	return _Main.Contract.SendMessage(&_Main.TransactOpts, messagePoolAddress, message, chainId)
}

// SetBridgeAddress is a paid mutator transaction binding the contract method 0x7f5a22f9.
//
// Solidity: function setBridgeAddress(address _bridgeAddress) returns()
func (_Main *MainTransactor) SetBridgeAddress(opts *bind.TransactOpts, _bridgeAddress common.Address) (*types.Transaction, error) {
	return _Main.contract.Transact(opts, "setBridgeAddress", _bridgeAddress)
}

// SetBridgeAddress is a paid mutator transaction binding the contract method 0x7f5a22f9.
//
// Solidity: function setBridgeAddress(address _bridgeAddress) returns()
func (_Main *MainSession) SetBridgeAddress(_bridgeAddress common.Address) (*types.Transaction, error) {
	return _Main.Contract.SetBridgeAddress(&_Main.TransactOpts, _bridgeAddress)
}

// SetBridgeAddress is a paid mutator transaction binding the contract method 0x7f5a22f9.
//
// Solidity: function setBridgeAddress(address _bridgeAddress) returns()
func (_Main *MainTransactorSession) SetBridgeAddress(_bridgeAddress common.Address) (*types.Transaction, error) {
	return _Main.Contract.SetBridgeAddress(&_Main.TransactOpts, _bridgeAddress)
}
